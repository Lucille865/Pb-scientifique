 using System;
using System.Collections.Generic;
using System.Drawing;

public class GrapheVisualisation
{
    private Graphe graphe;

    public GrapheVisualisation(Graphe graphe)
    {
        this.graphe = graphe;
    }

    public void DessinerGraphe(string cheminFichierImage)
    {
        int largeurImage = 600;
        int hauteurImage = 600;
        Bitmap image = new Bitmap(largeurImage, hauteurImage);

        using (Graphics g = Graphics.FromImage(image))
        {
            g.Clear(Color.White);

            Dictionary<Noeud, Point> positions = new Dictionary<Noeud, Point>();
            int rayon = 200;
            int centreX = largeurImage / 2;
            int centreY = hauteurImage / 2;
            int nbNoeuds = graphe.GetNoeuds().Count;
            double angleStep = 2 * Math.PI / nbNoeuds;

            int index = 0;
            foreach (var noeud in graphe.GetNoeuds())
            {
                int x = centreX + (int)(rayon * Math.Cos(index * angleStep));
                int y = centreY + (int)(rayon * Math.Sin(index * angleStep));
                positions[noeud] = new Point(x, y);
                index++;
            }

            Pen pen = new Pen(Color.Black, 2);
            foreach (var noeud in graphe.GetNoeuds())
            {
                foreach (var voisin in noeud.GetVoisins())
                {
                    g.DrawLine(pen, positions[noeud], positions[voisin]);
                }
            }

            foreach (var entry in positions)
            {
                int x = entry.Value.X;
                int y = entry.Value.Y;
                g.FillEllipse(Brushes.Blue, x - 10, y - 10, 20, 20);
                g.DrawString(entry.Key.Numero.ToString(), new Font("Arial", 12), Brushes.White, x - 7, y - 7);
            }
        }

        image.Save(cheminFichierImage);
        Console.WriteLine($"Le graphe a été sauvegardé sous le nom '{cheminFichierImage}'.");
    }
}
